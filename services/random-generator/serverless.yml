service: service-random-generator
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  timeout: 10
  memorySize: 128
  logRetentionInDays: 7
  tags:
    GITHUB_ACTOR: ${env:GITHUB_ACTOR, ''}
    GITHUB_REF: ${env:GITHUB_REF, ''}
    GITHUB_COMMIT_URL: http://github.com/${env:GITHUB_REPOSITORY, ''}/commit/${env:GITHUB_SHA, ''}
    GITHUB_ACTION_URL: http://github.com/${env:GITHUB_REPOSITORY, ''}/actions/runs/${env:GITHUB_RUN_ID, ''}/attempts/${env:GITHUB_RUN_ATTEMPT, ''}
  tracing:
    lambda: true
    apiGateway: true
  layers:
    - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-2-0:1
  environment:
    AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
  # https://towardsdatascience.com/build-a-serverless-api-with-amazon-lambda-and-api-gateway-dfd688510436
  # https://medium.com/@dorian599/serverless-api-keys-c0ee41528cc9
  apiGateway:
    apiKeys:
      - dev:
        - dev-key
    usagePlan:
      - dev:
          quota:
            limit: 10000
            offset: 0
            period: WEEK
          throttle:
            burstLimit: 1
            rateLimit: 5

resources:
  Resources:
    RequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: reqValidator
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true 

package:
  individually: true

functions:
  get-random-number:
    handler: src/handlers/random-number/index.handler
    events:
      - http:
          path: random/number
          method: get
          cors: true # if not present, doc plugin fails
          private: true
          reqValidatorName: RequestValidator
          documentation:
            summary: "Generate random number"
            description: "Genenerates a random number based on a simple JS seed"
            # requestBody:
            #   description: "A user information object"
            # requestModels:
            #   application/json: "PutDocumentRequest"
            # pathParams:
            #   - name: "username"
            #     description: "The username for a user to create"
            #     schema:
            #       type: "string"
            #       pattern: "^[-a-z0-9_]+$"
            # queryParams:
            #   - name: "membershipType"
            #     description: "The user's Membership Type"
            #     schema:
            #       type: "string"
            #       enum:
            #         - "premium"
            #         - "standard"
            # cookieParams:
            #   - name: "SessionId"
            #     description: "A Session ID variable"
            #     schema:
            #       type: "string"
            methodResponses:
              - statusCode: 200
                # responseBody:
                #   description: "Generated random number"
                responseModels:
                  application/json: randomNumberResponse

  get-random-user:
    handler: src/handlers/random-user/index.handler
    events:
      - http:
          path: random/user
          method: get
          cors: true
          reqValidatorName: RequestValidator
          private: true
          documentation:
            summary: Generate a list of random users
            queryParams:
              - name: results
                description: Number of random users to be returned
                required: false
                schema:
                  type: integer
                  minimum: 0
                  maximum: 150
            requestHeaders:
              - in: header
                name: x-api-key
                schema:
                  type: string
                required: true
            methodResponses:
              - statusCode: 200
                responseModels:
                  application/json: randomUserResponse
              # VALIDATE SPEC AGAINST INTEGRATION TESTS https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/jest-openapi#readme
    deploymentSettings:
      type: Linear10PercentEvery3Minutes #AllAtOnce, Canary10Percent30Minutes
      alias: live
      stages: [ dev, prd ] # rollout only apply to these stages

plugins:
  - serverless-esbuild
  - serverless-prune-plugin # for removing old lambda versions
  - serverless-plugin-canary-deployments # makes deployments more controllable, event when using simple "AllAtOnce"
  - serverless-offline
  - serverless-reqvalidator-plugin # for validating request schema
  - serverless-v2-aws-documentation # for documenting aws api gateway
  - serverless-openapi-documentation-v2 # for exporting openapi/swagger
  
custom:	
  # https://www.serverless.com/plugins/serverless-openapi-documentation
  documentation:
    version: '1'
    title: 'Random generator API'
    description: 'Check here how to generate random numbers or random users'
    models: ${file(sls/models.yml)}

  esbuild:
    minify: false
    bundle: true
    sourcemap: true
    watch:
      pattern:
        ['src/**/*.ts']
      ignore: ['.serverless/**/*', '.build', '.esbuild']

  prune:
    automatic: true
    number: 5

